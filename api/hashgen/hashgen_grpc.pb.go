// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hashgen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HashGeneratorClient is the client API for HashGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HashGeneratorClient interface {
	Generate(ctx context.Context, in *HashRequest, opts ...grpc.CallOption) (*HashReply, error)
}

type hashGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewHashGeneratorClient(cc grpc.ClientConnInterface) HashGeneratorClient {
	return &hashGeneratorClient{cc}
}

func (c *hashGeneratorClient) Generate(ctx context.Context, in *HashRequest, opts ...grpc.CallOption) (*HashReply, error) {
	out := new(HashReply)
	err := c.cc.Invoke(ctx, "/hashgen.HashGenerator/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashGeneratorServer is the server API for HashGenerator service.
// All implementations must embed UnimplementedHashGeneratorServer
// for forward compatibility
type HashGeneratorServer interface {
	Generate(context.Context, *HashRequest) (*HashReply, error)
	mustEmbedUnimplementedHashGeneratorServer()
}

// UnimplementedHashGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedHashGeneratorServer struct {
}

func (UnimplementedHashGeneratorServer) Generate(context.Context, *HashRequest) (*HashReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedHashGeneratorServer) mustEmbedUnimplementedHashGeneratorServer() {}

// UnsafeHashGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashGeneratorServer will
// result in compilation errors.
type UnsafeHashGeneratorServer interface {
	mustEmbedUnimplementedHashGeneratorServer()
}

func RegisterHashGeneratorServer(s grpc.ServiceRegistrar, srv HashGeneratorServer) {
	s.RegisterService(&HashGenerator_ServiceDesc, srv)
}

func _HashGenerator_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashGeneratorServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashgen.HashGenerator/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashGeneratorServer).Generate(ctx, req.(*HashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HashGenerator_ServiceDesc is the grpc.ServiceDesc for HashGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HashGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hashgen.HashGenerator",
	HandlerType: (*HashGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _HashGenerator_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/hashgen/hashgen.proto",
}
